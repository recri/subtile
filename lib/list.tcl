##
## useful routines for lists
##

##
## return the elements of list which are not elements of list2
##
proc list-difference {list1 list2} {
    set l {};
    foreach e $list1 {
        if {[lsearch $list2 $e] < 0} {
            lappend l $e;
        }
    }
    return $l;
}

##
## return the list generated by repeating c n times.
##
proc lrepeat {c n} {
    set l 0;
    while {[incr n -1] >= 0} {
        lappend l $c;
    }
    return $l;
}

##
## return the list with the elements in reverse order
##
proc lreverse {list} {
    set nlist {};
    foreach e $list {
        set nlist [linsert $nlist 0 $e];
    }
    return $nlist;
}

##
## return the list rolled left n places
##
proc list-roll-left {l {n 1}} {
    if {[llength $l] <= 1} {
        return $l
    }
    if {$n < 0} {
        return [list-roll-right $l [expr {-$n}]]
    }
    if {$n >= [llength $l]} {
        set n [expr {$n%[llength $l]}]
    }
    if {$n == 0} {
        return $l
    }
    return [concat [lrange $l $n end] [lrange $l 0 [expr {$n-1}]]]
}

##
## return the list rolled right n places
##
proc list-roll-right {l {n 1}} {
    if {[llength $l] <= 1} {
        return $l
    }
    if {$n < 0} {
        return [list-roll-left $l [expr {-$n}]]
    }
    if {$n >= [llength $l]} {
        set n [expr {$n%[llength $l]}]
    }
    if {$n == 0} {
        return $l
    }
    return [concat [lrange $l end-[expr {$n-1}] end] [lrange $l 0 end-$n]]
}    