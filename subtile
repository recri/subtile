#!/usr/bin/wish
package provide app-subtile 1.0

package require Tk

# set subtile(home) [file join $starkit::topdir lib app-subtile]
set subtile(home) [file dirname [expr { ! [catch {file readlink [info script]} link] ? $link : [info script]}]]

########################################################################
##
## load library sources
##
lappend auto_path [file join $subtile(home) lib];

########################################################################
##
## load tiling definitions.
##
set Pi [expr 4*atan(1)];
set Tau [expr (1+sqrt(5))/2];
set Sqrt2 [expr sqrt(2)];

foreach t {
    penrose penrose-KD penrose-A penrose-B penrose-R
    ammann ammann-A2 ammann-A3 ammann-A4 ammann-A5 ammann-A5T
    socolar shield wheel plate
    ttt binary
    danzer pinwheel sphinx chair
} {
    source [file join $subtile(home) tiling $t.tcl];
}


########################################################################
##
## default parameter values for subtiling window
## some of which are shared by catalog-window (or overridden there)
##

set subtile(catalog-scale) 80
set subtile(catalog-no-draw) 0
set subtile(catalog-overlay) 1
set subtile(catalog-watch-tiles) 0
set subtile(catalog-fill) white

set subtile(tiling-scale) 200
set subtile(tiling-no-draw) 0
set subtile(tiling-overlay) 0
set subtile(tiling-watch-tiles) 1
set subtile(tiling-fill) {}

set subtile(scale) 200;                 # initial window edge
set subtile(overlay) 0;
set subtile(watch-tiles) 1;
set subtile(background) white;
set subtile(fill) {};
set subtile(activeFill) grey;
set subtile(outline) black
set subtile(activeOutline) green
set subtile(tile-fill) blue
set subtile(color) 1

# tile decorations
set subtile(arrow) 0;                   # should tiles have an arrow on
                                        # their first edge
set subtile(label) 0;                   # should tiles be labelled
set subtile(decorate) 0;                # should tiles be decorated

# tile generation
set subtile(partials) 1;                # should tiles with missing parts
                                        # be completed or ignored 
set subtile(fillinholes) 1;             # 

# postscript generation
set subtile(save-postscript-directory) .
set subtile(save-postscript-file) tiling.ps
set subtile(pagesize) Letter
set subtile(landscape) 0
set subtile(colormode) gray

# mouse actions in subtiling
set subtile(mouse-1) rotate
set subtile(mouse-3) scale
set subtile(mouse-2) scroll

# about subtile for toplevel window
proc about-subtile {} {
    global subtile;
    about-something {About Subtile} [read-file [file join $subtile(home) README]];
}

# build the initial tiling catalog.
proc redraw-toplevel-catalog {w} {
    global subtile
    catch {$w.c delete all}
    foreach tiling $subtile(tilings) {
        pset title value $tiling
        #puts "adding to catalog $title\n[join $subtile($value-start-menu) \n]"
        if {[catch {catalog-tilings $w $title $value $subtile($value-start-menu)} error]} {
            global errorInfo
            error "$error\nduring $title processing" $errorInfo
        }
    }
}

# toplevel window
# note that this ends up using the empty string as the variable
# name for the options on the toplevel catalog
set w [catalog-toplevel {} {Subtile} [array get subtile]]
redraw-toplevel-catalog $w
set subtile(toplevel-w) $w

# fetch option settings from toplevel window
proc get-default-options {} {
    global subtile
    return [get-default-options-from-window $subtile(toplevel-w)]
}
# fetch option settings from a window
proc get-default-options-from-window {w} {
    upvar \#0 $w options
    return [array get options]
}
